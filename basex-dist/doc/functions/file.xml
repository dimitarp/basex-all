<?xml version="1.0" encoding="UTF-8"?>
<functions name="File" pref="file" namespace="http://basex.org/file">
  <text>The file module contains extension functions to perform file system related operations, such as listing, reading, or writing files. All functions are preceded by the <code>file:</code> prefix. Some changes might happen to this module, as it is currently aligned with the upcoming <a href="http://expath.org/spec/file">EXPath</a> specification.</text>

  <function name="exists" type="xs:boolean">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Checks if a path exist.</summary>
    <rule>This function returns an <code>xs:boolean</code> indicating whether a file or directory specified by <code>$path</code> exists in the file system.</rule>
  </function>

  <function name="is-directory" type="xs:boolean">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Checks if a path points to a directory.</summary>
    <rule>This function returns an <code>xs:boolean</code> indicating whether the argument <code>$path</code> points to an existing directory.</rule>
  </function>

  <function name="is-file" type="xs:boolean">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Checks if a path points to a file.</summary>
    <rule>This function returns an <code>xs:boolean</code> indicating whether the argument <code>$path</code> points to an existing file.</rule>
  </function>

  <function name="is-readable" type="xs:boolean">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Checks if a file is readable.</summary>
    <rule>This function returns an <code>xs:boolean</code> indicating whether the file specified by <code>$path</code> exists and is readable.</rule>
  </function>

  <function name="is-writable" type="xs:boolean">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Checks if a file is writable.</summary>
    <rule>This function returns an <code>xs:boolean</code> indicating whether the file specified by <code>$path</code> exists and is writable.</rule>
  </function>

  <function name="last-modified" type="xs:dateTime">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Returns the timestamp of a path.</summary>
    <rule>This function retrieves the timestamp of the last modification of the file or directory specified by <code>$path</code>.</rule>
    <error code="FOFL0001">is raised if the specified path does not exist.</error>
  </function>

  <function name="size" type="xs:integer">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Returns the size of a file.</summary>
    <rule>This function returns the size, in bytes, of the file specified by <code>$path</code>. The return value is unspecified if the argument points to a directory.</rule>
    <error code="FOFL0001">is raised if the specified path does not exist.</error>
  </function>

  <function name="list" type="xs:string*">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <signature>
      <arg name="path" type="xs:string"/>
      <arg name="recursive" type="xs:boolean"/>
    </signature>
    <signature>
      <arg name="path" type="xs:string"/>
      <arg name="recursive" type="xs:boolean"/>
      <arg name="pattern" type="xs:string"/>
    </signature>
    <summary>Lists the contents of a directory.</summary>
    <rule>This function lists all files and directories found in the directory that is specified by <code>$path</code>. The returned paths are relative to the provided path.</rule>
    <rule>The optional parameter <code>$recursive</code> specifies whether the sub-directories are to be recursed as well.</rule>
    <rule>The optional parameter <code>$pattern</code> defines a file name pattern. If present, only those files and directories are returned that correspond to the pattern. A pattern may contain asterisks (<code>*</code>) to match zero or more characters, and question marks (<code>?</code>) to match single characters. Several patterns can be separated with a comma (<code>,</code>).</rule>
    <error code="FOFL0001">is raised if the specified path does not exist.</error>
    <error code="FOFL0003">is raised if the specified path does not point to a directory.</error>
    <error code="FOFL0008">is raised if the operation fails for some other reason.</error>
  </function>

  <function name="create-directory" type="empty-sequence()">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Creates a new directory path.</summary>
    <rule>This function recursively creates the directories specified by <code>$path</code>.</rule>
    <error code="FOFL0002">is raised if a file with the same path already exists.</error>
    <error code="FOFL0006">is raised if the specified path is invalid (e.g., contains invalid characters).</error>
    <error code="FOFL0008">is raised if the operation fails for some other reason.</error>
  </function>

  <function name="delete" type="empty-sequence()">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <signature>
      <arg name="path" type="xs:string"/>
      <arg name="recursive" type="xs:boolean"/>
    </signature>
    <summary>Deletes a file or directory.</summary>
    <rule>This function deletes a file or directory specified by <code>$path</code>. No operation will be performed if the specified path does not exist.</rule>
    <rule>If the optional parameter <code>$recursive</code> is provided, the operation is performed recursively for all sub-directories of the given path.</rule>
    <error code="FOFL0005">is raised if <code>$recursive</code> is not specified or set to <code>false</code>, and if the specified path points to a non-empty directory.</error>
    <error code="FOFL0008">is raised if the operation fails for some other reason.</error>
  </function>

  <function name="read" type="xs:string">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <signature>
      <arg name="path" type="xs:string"/>
      <arg name="encoding" type="xs:string"/>
    </signature>
    <summary>Reads the contents a file.</summary>
    <rule>This function reads the textual contents of the file specified by <code>$path</code> and returns it as a <code>xs:string</code>.</rule>
    <rule>The optional parameter <code>$encoding</code> defines the encoding of the file.</rule>
    <error code="FOFL0001">is raised if the specified file does not exist.</error>
    <error code="FOFL0004">is raised if the specified path is a directory.</error>
    <error code="FOFL0007">is raised if the specified encoding is not supported, or unknown.</error>
    <error code="FOFL0008">is raised if the operation fails for some other reason.</error>
  </function>

  <function name="read-binary" type="xs:base64Binary">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Reads the binary contents of a file.</summary>
    <rule>This function reads the binary content of the file specified by <code>$path</code> and returns as a <code>xs:base64Binary</code>.</rule>
    <error code="FOFL0001">is raised if the specified file does not exist.</error>
    <error code="FOFL0004">is raised if the specified path is a directory.</error>
    <error code="FOFL0008">is raised if the operation fails for some other reason.</error>
  </function>

  <function name="write" type="empty-sequence()">
    <signature>
      <arg name="path" type="xs:string"/>
      <arg name="items" type="xs:item()*"/>
    </signature>
    <signature>
      <arg name="path" type="xs:string"/>
      <arg name="items" type="xs:item()*"/>
      <arg name="params" type="xs:node()*"/>
    </signature>
    <signature>
      <arg name="path" type="xs:string"/>
      <arg name="items" type="xs:item()*"/>
      <arg name="params" type="xs:node()*"/>
      <arg name="append" type="xs:boolean"/>
    </signature>
    <summary>Writes a sequence of items to a file.</summary>
    <rule>This function writes a sequence, specified by <code>$items</code>, to a file specified by <code>$path</code>. If the specified file already exists, it will be overwritten.</rule>
    <rule>The optional argument <code>$params</code> is used to set the serialization parameters, as defined in <a href="http://www.w3.org/TR/xslt-xquery-serialization/">XSLT 2.0 and XQuery 1.0 Serialization</a>.</rule>
    <rule>If the <code>$append</code> flag is set to <code>true</code>, the serialized items are appended to the original file. If the file does not exist, a new one is created.</rule>
    <error code="FOFL0004">is raised if the specified path is a directory.</error>
    <error code="FOFL0008">is raised if the operation fails for some other reason.</error>
  </function>

  <function name="write-binary" type="empty-sequence()">
    <signature>
      <arg name="path" type="xs:string"/>
      <arg name="item" type="xs:base64Binary"/>
    </signature>
    <signature>
      <arg name="path" type="xs:string"/>
      <arg name="item" type="xs:base64Binary"/>
      <arg name="append" type="xs:boolean"/>
    </signature>
    <summary>Writes a sequence of items to a file.</summary>
    <rule>This function writes a <code>xs:basex64Binary</code> item specified by <code>$item</code> to a file specified by <code>$path</code>. If the specified file already exists, it will be overwritten.</rule>
    <rule>If the <code>$append</code> flag is set to <code>true</code>, the serialized item is appended to the original file. If the file does not exist, a new one is created.</rule>
    <error code="FOFL0004">is raised if the specified path is a directory.</error>
    <error code="FOFL0008">is raised if the operation fails for some other reason.</error>
  </function>

  <function name="copy" type="empty-sequence()">
    <signature>
      <arg name="source" type="xs:string"/>
      <arg name="target" type="xs:string"/>
    </signature>
    <summary>Copies a file.</summary>
    <rule>This function copies a file specified by <code>$source</code> to the file or directory specified by <code>$target</code>. If the target represents an existing file, it will be overwritten. No operation will be performed if the source and target path are equal.</rule>
    <error code="FOFL0001">is raised if the specified source does not exist.</error>
    <error code="FOFL0004">is raised if the specified source is a directory.</error>
    <error code="FOFL0006">is raised if the specified target path points to a file in a non-existing directory.</error>
    <error code="FOFL0008">is raised if the operation fails for some other reason.</error>
  </function>

  <function name="move" type="empty-sequence()">
    <signature>
      <arg name="source" type="xs:string"/>
      <arg name="target" type="xs:string"/>
    </signature>
    <summary>Moves a file.</summary>
    <rule>This function moves, or renames, the file or directory specified by <code>$source</code> to the path specified by <code>$target</code>. No operation will be performed if the source and target path are equal.</rule>
    <error code="FOFL0001">is raised if the specified source does not exist.</error>
    <error code="FOFL0006">is raised if the specified target path points to a file in a non-existing directory.</error>
    <error code="FOFL0008">is raised if the operation fails for some other reason.</error>
  </function>

  <function name="path-separator" type="xs:string">
    <signature/>
    <summary>Returns the path separator.</summary>
    <rule>This function returns the path separator used by the operating system.</rule>
  </function>

  <function name="path-to-full-path" type="xs:string">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Returns a full path representation.</summary>
    <rule>This function transforms the path specified by <code>$path</code> into a full operating system path.</rule>
  </function>

  <function name="path-to-uri" type="xs:string">
    <signature>
      <arg name="path" type="xs:string"/>
    </signature>
    <summary>Returns a URI representation.</summary>
    <rule>This function transforms the path specified by <code>$path</code> into a URI with the <code>file://</code> scheme.</rule>
  </function>
</functions>
