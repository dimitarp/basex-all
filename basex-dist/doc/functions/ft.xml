<functions name="Full-Text" pref="ft" namespace="http://basex.org/db">
  <text>This module extends the XQuery Full Text Recommendation with some useful functions: The index can be directly accessed, full-text results can be marked with additional elements, or the relevant parts can be extracted. Moreover, the score value, which is generated by the <code>contains text</code> expression, can be explicitly requested from items. All functions are introduced with the <code>ft:</code> prefix.</text>
  <function name="search" type="text()">
    <signature>
      <arg name="node" type="node()"/>
      <arg name="text" type="xs:string"/>
    </signature>
    <summary>Performs a full-text index request.</summary>
    <rule>This function performs an explicit full-text index request on the specified database node and returns all text nodes that contain the string <code>$text</code>. The index full-text options are used for searching, i.e., if the index terms were stemmed, the search string will be stemmed as well.</rule>
    <example>The expression <code>ft:search(., "QUERY")</code> returns all text nodes of the currently opened database that contain the string "QUERY".</example>
    <error code="BASX0002">is raised if the context item does not represent a database node.</error>
  </function>
  <function name="mark" type="node()*">
    <signature>
      <arg name="nodes" type="node()*"/>
    </signature>
    <signature>
      <arg name="nodes" type="node()*"/>
      <arg name="tag" type="xs:string"/>
    </signature>
    <summary>Marks results from a full-text index request.</summary>
    <rule>This function puts a marker element around the resulting <code>$nodes</code> of a full-text index request.</rule>
    <rule>The default tag name of the marker element is <code>mark</code>. An alternative tag name can be chosen via the optional <code>$tag</code> argument.</rule>
    <rule>Note that the XML node to be transformed must be an internal "database" node. The <code>transform</code> expression can be used to apply the method to a main-memory fragment (see example).</rule>
    <example>The following query returns <code>&lt;XML&gt;&lt;mark&gt;hello&lt;/mark&gt; world&lt;/XML&gt;</code>, if one text node of the database <code>DB</code> has the value "hello world":<br/>
    <code>ft:mark(db:open('DB')//*[text() contains text 'hello'])</code></example>
    <example>The following expression returns <code>&lt;p&gt;&lt;b&gt;word&lt;/b&gt;&lt;/p&gt;</code>:<br/>
    <code>copy $p := &lt;p&gt;word&lt;/p&gt;</code><br/>
    <code>modify ()</code><br/>
    <code>return ft:mark($p[text() contains text 'word'], 'b')</code></example>
    <error code="BASX0002">is raised if the context item does not represent a database node.</error>
    <error code="FOCA0002">is raised if <code>$name</code> is no valid QName.</error>
  </function>
  <function name="extract" type="node()*">
    <signature>
      <arg name="nodes" type="node()*"/>
    </signature>
    <signature>
      <arg name="nodes" type="node()*"/>
      <arg name="tag" type="xs:string"/>
    </signature>
    <signature>
      <arg name="nodes" type="node()*"/>
      <arg name="tag" type="xs:string"/>
      <arg name="length" type="xs:integer"/>
    </signature>
    <summary>Extracts relevant parts of full-text results.</summary>
    <rule>This function extracts and returns relevant parts of full-text results. It puts a marker element around the resulting <code>$nodes</code> of a full-text index request and chops irrelevant sections of the result.</rule>
    <rule>The default tag name of the marker element is <code>mark</code>. An alternative tag name can be chosen via the optional <code>$tag</code> argument.</rule>
    <rule>The default length of the returned text is <code>150</code> characters. An alternative length can be specified via the optional <code>$length</code> argument. Note that the effective text length may differ from the specified text due to formatting and readibility issues.</rule>
    <example>The following query may return <code>&lt;XML&gt;...&lt;b&gt;hello&lt;/b&gt;...&lt;XML&gt;</code> if a text node of the database <code>DB</code> contains the string "hello world":<br/>
    <code>ft:extract(db:open('DB')//*[text() contains text 'hello'], 'b', 1)</code></example>
    <error code="BASX0002">is raised if the context item does not represent a database node.</error>
    <error code="FOCA0002">is raised if <code>$name</code> is no valid QName.</error>
  </function>
  <function name="score" type="xs:double*">
    <signature>
      <arg name="item" type="item()*"/>
    </signature>
    <summary>Returns the score of items.</summary>
    <rule>This function returns the score values (0.0 - 1.0) that have been attached to the specified items. <code>0</code> is returned if no score was attached.</rule>
    <example>The expression <code>ft:score('a' contains text 'a')</code> returns the <code>xs:double</code> value <code>1</code>.</example>
  </function>
</functions>
